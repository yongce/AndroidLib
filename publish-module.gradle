apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'org.jetbrains.dokka'

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    archiveClassifier.set('javadoc')
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

group = mavenMeta.groupId
version = mavenMeta.version

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                groupId = mavenMeta.groupId
                artifactId = project.archivesBaseName
                version = mavenMeta.version

                artifact androidSourcesJar
                artifact javadocJar

                pom {
                    name = project.moduleName
                    description = project.moduleDesc
                    url = mavenMeta.projectUrl

                    scm {
                        url = mavenMeta.projectUrl
                        connection = mavenMeta.projectScmConnection
                        developerConnection = mavenMeta.projectScmDevConnection
                    }

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = mavenMeta.developerId
                            name = mavenMeta.developerName
                            email = mavenMeta.developerEmail
                        }
                    }
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(
            rootProject.ext["signing.keyId"],
            rootProject.ext["signing.key"],
            rootProject.ext["signing.password"],
    )
    sign publishing.publications
}